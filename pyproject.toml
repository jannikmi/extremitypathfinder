[tool.poetry]
name = "extremitypathfinder"
version = "2.7.2"
license = "MIT"
readme = "README.rst"
repository = "https://github.com/jannikmi/extremitypathfinder"
homepage = "https://extremitypathfinder.readthedocs.io/en/latest/"
documentation = "https://extremitypathfinder.readthedocs.io/en/latest/"
keywords = ["path-planning", "path-finding", "shortest-path", "visibility", "graph", "polygon", "grid", "map", "robotics", "navigation", "offline"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: Science/Research",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Education",
    "Topic :: Games/Entertainment"
]
description = "python package for fast shortest path computation on 2D polygon or grid maps"
authors = ["jannikmi <github@michelfe.it>"]
include = [
    "LICENSE",
    ".editorconfig",
    ".pre-commit-config.yaml",
    "CHANGELOG.rst",
    "CONTRIBUTING.rst",
    "Makefile",
    "README.rst",
    "tox.ini",
    "tests/*.py",
    "example.json",
]
#exclude = ["my_package/excluded.py"]

[tool.poetry.scripts]
extremitypathfinder = "extremitypathfinder.command_line:main"

[tool.poetry.dependencies]
python = ">=3.8,<4"
networkx = "^3"
numpy = [
    { version = ">=1.21,<2", python = "<3.9" },
    { version = ">=1.23,<2", python = ">=3.9" }
]
numba = [
    { version = ">=0.56,<1", python = "<3.12", optional = true },
    { version = ">=0.59,<1", python = ">=3.12", optional = true }
]
# required for jit of np.linalg.solve with numba
scipy = [
    { version = ">=1.9,<2", python = "<3.12", optional = true },
    { version = ">=1.10,<2", python = ">=3.12", optional = true }
]

[tool.poetry.group.dev.dependencies]
pre-commit = "*"
pytest = "*"
tox = "*"

[tool.poetry.group.plot.dependencies]
# also required for runnin the tests
matplotlib = "*"

[tool.poetry.group.docs.dependencies]
Sphinx = "*"
sphinx-rtd-theme = "*"

[tool.poetry.group.plot]
optional = true

[tool.poetry.group.docs]
optional = true


[tool.poetry.extras]
numba = ["numba", "scipy"]

[build-system]
requires = ["poetry-core>=1.5", "poetry>=1.4"]
build-backend = "poetry.core.masonry.api"

[tool.tox]
legacy_tox_ini = """
[tox]
isolated_build = true
envlist =
    docs,py{38,39,310,311,312}{,-numba}

[gh-actions]
python =
    3.8: py38{,-numba}
    3.9: py39{,-numba}
    3.10: py310{,-numba}
    3.11: py311{,-numba}
    3.12: py312{,-numba}


[testenv:docs]
description = build documentation
basepython = python3.12
allowlist_externals = poetry,sphinx-build
commands =
  poetry install -v --with docs
  sphinx-build -d "{envtmpdir}{/}doctree" docs "{toxworkdir}{/}docs_out" --color -b html
  python -c 'print(r"documentation available under file://{toxworkdir}{/}docs_out{/}index.html")'

[testenv]
allowlist_externals = poetry
commands =
    !numba: poetry install -v --with dev,plot
    numba:  poetry install -v --with dev,plot --extras numba
    poetry run pytest {posargs}
"""
